openapi: 3.0.0
info:
  title: Glassflow API
  description: API for managing data pipelines in Glassflow
  version: 1.0.0
  contact:
    email: help@glassflow.dev

servers:
  - url: /api/v1
    description: Glassflow API v1

paths:
  /healthz:
    get:
      summary: Health check
      description: Returns the health status of the API service
      tags:
        - System
      responses:
        '200':
          description: Service is healthy

  /platform:
    get:
      summary: Get platform information
      description: Returns information about the platform and orchestrator
      tags:
        - System
      responses:
        '200':
          description: Platform information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  /pipeline:
    post:
      summary: Create a new pipeline
      description: Create a new data pipeline with source, sink, and optional join configuration
      tags:
        - Pipeline
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pipeline'
      responses:
        '200':
          description: Pipeline created successfully
        '400':
          description: Bad request - Invalid JSON
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Pipeline quota reached or ID already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Unprocessable entity - Invalid pipeline configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
    get:
      summary: Get all pipelines
      description: Retrieve a list of all pipelines
      tags:
        - Pipeline
      responses:
        '200':
          description: Pipelines retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListPipelineConfig'
        '500':
          $ref: '#/components/responses/ServerError'

  /pipeline/{id}:
    get:
      summary: Get a pipeline by ID
      description: Retrieve a pipeline configuration by its ID
      tags:
        - Pipeline
      parameters:
        - $ref: '#/components/parameters/PipelineId'
      responses:
        '200':
          description: Pipeline retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipeline'
        '404':
          description: Pipeline not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Unprocessable entity - Invalid pipeline ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'

    patch:
      summary: Update pipeline name
      description: Update the name of an existing pipeline
      tags:
        - Pipeline
      parameters:
        - $ref: '#/components/parameters/PipelineId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePipelineNameRequest'
      responses:
        '200':
          description: Pipeline name updated successfully
        '400':
          description: Bad request - Invalid JSON
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Pipeline not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Unprocessable entity - Pipeline ID cannot be empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      summary: Delete a pipeline
      description: Delete a pipeline. Pipeline must be in 'Stopped' or 'Terminated' status to be deleted.
      tags:
        - Pipeline
      parameters:
        - $ref: '#/components/parameters/PipelineId'
      responses:
        '204':
          description: Pipeline deleted successfully
        '400':
          description: Bad request - Pipeline ID cannot be empty or pipeline is not in deletable state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Pipeline not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  /pipeline/{id}/health:
    get:
      summary: Get pipeline health
      description: Retrieve health status and basic information for a specific pipeline
      tags:
        - Pipeline
      parameters:
        - $ref: '#/components/parameters/PipelineId'
      responses:
        '200':
          description: Pipeline health retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PipelineHealth'
        '400':
          description: Bad request - Pipeline ID cannot be empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Pipeline not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  /pipeline/{id}/dlq/consume:
    get:
      summary: Consume DLQ messages
      description: Retrieve messages from the Dead Letter Queue for pipeline
      tags:
        - Pipeline
      parameters:
        - $ref: '#/components/parameters/PipelineId'
        - name: batch_size
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
          description: Number of messages to retrieve (uses default if not specified or invalid)
      responses:
        '200':
          description: DLQ messages retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DLQMessage'
        '204':
          description: No messages in DLQ
        '404':
          description: DLQ for pipeline does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Unprocessable entity - Invalid batch size or pipeline ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  /pipeline/{id}/dlq/state:
    get:
      summary: Get DLQ state
      description: Retrieve the current state and statistics of the Dead Letter Queue for a specific pipeline
      tags:
        - Pipeline
      parameters:
        - $ref: '#/components/parameters/PipelineId'
      responses:
        '200':
          description: DLQ state retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DLQState'
        '404':
          description: DLQ for pipeline does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Unprocessable entity - Pipeline ID cannot be empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  /pipeline/{id}/pause:
    post:
      summary: Pause a pipeline
      description: Pause a running pipeline
      tags:
        - Pipeline
      parameters:
        - $ref: '#/components/parameters/PipelineId'
      responses:
        '204':
          description: Pipeline paused successfully
        '404':
          description: Pipeline not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict - Pipeline cannot be paused in current state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusValidationError'
        '422':
          description: Unprocessable entity - Pipeline ID cannot be empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '501':
          description: Not implemented - Feature not available for this version
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string
                example: "Internal Server Error"

  /pipeline/{id}/resume:
    post:
      summary: Resume a pipeline
      description: Resume a paused pipeline
      tags:
        - Pipeline
      parameters:
        - $ref: '#/components/parameters/PipelineId'
      responses:
        '204':
          description: Pipeline resumed successfully
        '404':
          description: Pipeline not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict - Pipeline cannot be resumed in current state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusValidationError'
        '422':
          description: Unprocessable entity - Pipeline ID cannot be empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '501':
          description: Not implemented - Feature not available for this version
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string
                example: "Internal Server Error"

  /pipeline/{id}/stop:
    post:
      summary: Stop a pipeline
      description: Stop a running or paused pipeline
      tags:
        - Pipeline
      parameters:
        - $ref: '#/components/parameters/PipelineId'
      responses:
        '204':
          description: Pipeline stopped successfully
        '404':
          description: Pipeline not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict - Pipeline cannot be stopped in current state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusValidationError'
        '422':
          description: Unprocessable entity - Pipeline ID cannot be empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '501':
          description: Not implemented - Feature not available for this version
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string
                example: "Internal Server Error"

  /pipeline/{id}/terminate:
    post:
      summary: Terminate a pipeline
      description: Terminate a pipeline permanently
      tags:
        - Pipeline
      parameters:
        - $ref: '#/components/parameters/PipelineId'
      responses:
        '204':
          description: Pipeline terminated successfully
        '404':
          description: Pipeline not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict - Pipeline cannot be terminated in current state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusValidationError'
        '422':
          description: Unprocessable entity - Pipeline ID cannot be empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '501':
          description: Not implemented - Feature not available for this version
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string
                example: "Internal Server Error"


components:
  parameters:
    PipelineId:
      name: id
      in: path
      required: true
      schema:
        type: string
      description: Pipeline identifier

  responses:
    ServerError:
      description: Internal server error
      content:
        text/plain:
          schema:
            type: string
            example: "Internal Server Error"

  schemas:
    PlatformResponse:
      type: object
      properties:
        orchestrator:
          type: string
          description: The type of orchestrator being used
          enum: [ local, k8s, unknown ]
          example: "k8s"
        api_version:
          type: string
          description: API version (optional)
      required:
        - orchestrator
    ErrorResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: "Invalid pipeline configuration"
        field:
          type: object
          additionalProperties:
            type: string
          example:
            pipeline_id: "pipeline-id"
    ListPipelineConfig:
      type: object
      required:
        - pipeline_id
        - name
        - transformation_type
        - created_at
        - status
      properties:
        pipeline_id:
          type: string
          description: Unique identifier for the pipeline
          example: "etl-pipeline"
        name:
          type: string
          description: Human-readable name for the pipeline
          example: "ETL Pipeline"
        transformation_type:
          type: string
          description: Type of transformation applied
          example: "Ingest Only"
        created_at:
          type: string
          format: date-time
          description: When the pipeline was created
          example: "2023-11-20T10:00:00Z"
        status:
          $ref: '#/components/schemas/PipelineStatus'

    PipelineStatus:
      type: string
      enum: [Created, Running, Pausing, Paused, Stopping, Stopped, Terminating, Terminated, Failed]

    Pipeline:
      type: object
      required:
        - pipeline_id
        - source
        - sink
      properties:
        pipeline_id:
          type: string
          description: Unique identifier for the pipeline
          example: "etl-pipeline"
        name:
          type: string
          description: Human-readable name for the pipeline
          example: "ETL Pipeline"
        source:
          type: object
          required:
            - type
            - provider
            - connection_params
            - topics
          properties:
            type:
              type: string
              description: Source type
              example: "kafka"
            provider:
              type: string
              description: Source provider
              example: "aiven"
            connection_params:
              $ref: '#/components/schemas/SourceConnectionParams'
            topics:
              type: array
              items:
                $ref: '#/components/schemas/KafkaTopic'
        join:
          type: object
          description: Optional join configuration for temporal joins between data sources
          required:
            - enabled
            - type
            - sources
          properties:
            type:
              type: string
              description: Join type
              example: "temporal"
            enabled:
              type: boolean
              description: Whether join is enabled for this pipeline
              example: false
            sources:
              type: array
              description: Join source configurations
              items:
                $ref: '#/components/schemas/JoinSource'
        sink:
          $ref: '#/components/schemas/Sink'
        status:
          $ref: '#/components/schemas/PipelineStatus'

    SourceConnectionParams:
      type: object
      required:
        - brokers
        - protocol
      properties:
        brokers:
          type: array
          items:
            type: string
          example: ["localhost:9092"]
          description: "List of Kafka broker addresses"
        skip_auth:
          type: boolean
          example: false
          description: "Skip authentication"
        protocol:
          type: string
          enum: ["SASL_PLAINTEXT", "PLAINTEXT", "SASL_SSL", "SSL"]
          example: "SASL_SSL"
          description: "SASL protocol"
        mechanism:
          type: string
          example: "PLAIN"
          description: "SASL mechanism"
        username:
          type: string
          example: "user"
          description: "SASL username"
        password:
          type: string
          example: "password"
          description: "SASL password"
        root_ca:
          type: string
          description: "Root CA certificate for TLS"

    JoinSource:
      type: object
      required:
        - source_id
        - join_key
        - time_window
        - orientation
      properties:
        source_id:
          type: string
          example: "customers"
        join_key:
          type: string
          example: "customer_id"
        time_window:
          type: string
          description: Duration string (ms, s, m, h, d units)
          example: "10m"
        orientation:
          type: string
          example: "left"

    Sink:
      type: object
      required:
        - host
        - port
        - database
        - username
        - password
        - table
        - max_batch_size
      properties:
        type:
          type: string
          default: "clickhouse"
          example: "clickhouse"
        host:
          type: string
          example: "localhost"
        port:
          type: string
          example: "9000"
          description: "Native port used for backend connection"
        http_port:
          type: string
          example: "8123"
          description: "HTTP port used for UI frontend connection"
        database:
          type: string
          example: "analytics"
        username:
          type: string
          example: "username"
        password:
          type: string
          example: "password"
        table:
          type: string
          example: "orders"
        secure:
          type: boolean
          example: false
        table_mapping:
          type: array
          items:
            $ref: '#/components/schemas/ColumnMapping'
        max_batch_size:
          type: integer
          example: 10000
        max_delay_time:
          type: string
          description: Maximum delay time as duration string (ms, s, m, h, d units)
          example: "60s"
        skip_certificate_verification:
          type: boolean
          example: false

    ColumnMapping:
      type: object
      required:
        - source_id
        - field_name
        - column_name
        - column_type
      properties:
        source_id:
          type: string
          example: "orders"
          description: "Source stream identifier"
        field_name:
          type: string
          example: "order_id"
          description: "Field name from the source"
        column_name:
          type: string
          example: "id"
          description: "Target column name in ClickHouse table"
        column_type:
          type: string
          example: "UInt64"
          description: "ClickHouse column type"

    KafkaTopic:
      type: object
      required:
        - name
        - id
        - schema
      properties:
        name:
          type: string
          description: Kafka topic name
          example: "orders"
        id:
          type: string
          description: Topic ID
          example: "orders-topic-1"
        schema:
          $ref: '#/components/schemas/TopicSchema'
        consumer_group_initial_offset:
          type: string
          enum: [earliest, latest]
          default: "earliest"
        replicas:
          type: integer
          default: 1
          example: 1
        deduplication:
          $ref: '#/components/schemas/DeduplicationConfig'

    TopicSchema:
      type: object
      required:
        - fields
      properties:
        type:
          type: string
          default: "json"
        fields:
          type: array
          items:
            $ref: '#/components/schemas/SchemaField'

    SchemaField:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
          example: "order_id"
        type:
          type: string
          example: "string"

    DeduplicationConfig:
      type: object
      required:
        - enabled
        - id_field
        - id_field_type
        - time_window
      properties:
        enabled:
          type: boolean
          example: true
          description: Whether deduplication is enabled for this topic
        id_field:
          type: string
          example: "order_id"
          description: Field name to use for deduplication
        id_field_type:
          type: string
          example: "string"
          description: Data type of the deduplication field
        time_window:
          type: string
          description: Duration string for deduplication window (ms, s, m, h, d units)
          example: "5m"

    UpdatePipelineNameRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: New name for the pipeline
          example: "Updated Pipeline Name"

    PipelineHealth:
      type: object
      required:
        - pipeline_id
        - pipeline_name
        - overall_status
        - created_at
        - updated_at
      properties:
        pipeline_id:
          type: string
          description: Unique identifier for the pipeline
          example: "etl-pipeline"
        pipeline_name:
          type: string
          description: Human-readable name for the pipeline
          example: "ETL Pipeline"
        overall_status:
          $ref: '#/components/schemas/PipelineStatus'
        created_at:
          type: string
          format: date-time
          description: When the pipeline was created
          example: "2023-11-20T10:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: When the pipeline was last updated
          example: "2023-11-20T11:30:00Z"

    DLQMessage:
      type: object
      required:
        - component
        - error
        - original_message
      properties:
        component:
          type: string
          description: Component that generated the error
          example: "kafka-consumer"
        error:
          type: string
          description: Error message describing what went wrong
          example: "Failed to parse JSON: invalid character"
        original_message:
          type: string
          description: Original message that failed processing
          example: '{"order_id": "12345", "invalid": json}'

    DLQState:
      type: object
      required:
        - total_messages
        - unconsumed_messages
      properties:
        last_received_at:
          type: string
          format: date-time
          nullable: true
          description: Timestamp when the last message was received in the DLQ
          example: "2023-11-20T10:30:00Z"
        last_consumed_at:
          type: string
          format: date-time
          nullable: true
          description: Timestamp when messages were last consumed from the DLQ
          example: "2023-11-20T10:35:00Z"
        total_messages:
          type: integer
          format: int64
          minimum: 0
          description: Total number of messages ever received in the DLQ
          example: 150
        unconsumed_messages:
          type: integer
          format: int64
          minimum: 0
          description: Number of messages currently available for consumption
          example: 25

    StatusValidationError:
      type: object
      required:
        - message
        - code
        - current_status
        - requested_status
      properties:
        message:
          type: string
          description: Error message describing the status validation failure
          example: "Cannot pause pipeline in current state"
        code:
          type: string
          description: Error code for the validation failure
          example: "INVALID_STATUS_TRANSITION"
        current_status:
          type: string
          description: Current status of the pipeline
          example: "Created"
        requested_status:
          type: string
          description: The status that was requested
          example: "Pausing"
        valid_transitions:
          type: array
          items:
            type: string
          description: List of valid status transitions from current state
          example: ["Running", "Stopping"]

tags:
  - name: System
    description: System health and platform information endpoints
  - name: Pipeline
    description: Pipeline management
