// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/glassflow/clickhouse-etl-internal/glassflow-api/internal/api (interfaces: PipelineManager)
//
// Generated by this command:
//
//	mockgen -destination ./mocks/pipeline_manager_mock.go -package mocks . PipelineManager
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/glassflow/clickhouse-etl-internal/glassflow-api/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockPipelineManager is a mock of PipelineManager interface.
type MockPipelineManager struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineManagerMockRecorder
	isgomock struct{}
}

// MockPipelineManagerMockRecorder is the mock recorder for MockPipelineManager.
type MockPipelineManagerMockRecorder struct {
	mock *MockPipelineManager
}

// NewMockPipelineManager creates a new mock instance.
func NewMockPipelineManager(ctrl *gomock.Controller) *MockPipelineManager {
	mock := &MockPipelineManager{ctrl: ctrl}
	mock.recorder = &MockPipelineManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipelineManager) EXPECT() *MockPipelineManagerMockRecorder {
	return m.recorder
}

// CleanUpPipelines mocks base method.
func (m *MockPipelineManager) CleanUpPipelines(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanUpPipelines", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanUpPipelines indicates an expected call of CleanUpPipelines.
func (mr *MockPipelineManagerMockRecorder) CleanUpPipelines(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanUpPipelines", reflect.TypeOf((*MockPipelineManager)(nil).CleanUpPipelines), ctx)
}

// CreatePipeline mocks base method.
func (m *MockPipelineManager) CreatePipeline(ctx context.Context, cfg *models.PipelineConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePipeline", ctx, cfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePipeline indicates an expected call of CreatePipeline.
func (mr *MockPipelineManagerMockRecorder) CreatePipeline(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipeline", reflect.TypeOf((*MockPipelineManager)(nil).CreatePipeline), ctx, cfg)
}

// DeletePipeline mocks base method.
func (m *MockPipelineManager) DeletePipeline(ctx context.Context, pid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePipeline", ctx, pid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePipeline indicates an expected call of DeletePipeline.
func (mr *MockPipelineManagerMockRecorder) DeletePipeline(ctx, pid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePipeline", reflect.TypeOf((*MockPipelineManager)(nil).DeletePipeline), ctx, pid)
}

// EditPipeline mocks base method.
func (m *MockPipelineManager) EditPipeline(ctx context.Context, pid string, newCfg *models.PipelineConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditPipeline", ctx, pid, newCfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditPipeline indicates an expected call of EditPipeline.
func (mr *MockPipelineManagerMockRecorder) EditPipeline(ctx, pid, newCfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditPipeline", reflect.TypeOf((*MockPipelineManager)(nil).EditPipeline), ctx, pid, newCfg)
}

// GetOrchestratorType mocks base method.
func (m *MockPipelineManager) GetOrchestratorType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrchestratorType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetOrchestratorType indicates an expected call of GetOrchestratorType.
func (mr *MockPipelineManagerMockRecorder) GetOrchestratorType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrchestratorType", reflect.TypeOf((*MockPipelineManager)(nil).GetOrchestratorType))
}

// GetPipeline mocks base method.
func (m *MockPipelineManager) GetPipeline(ctx context.Context, pid string) (models.PipelineConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipeline", ctx, pid)
	ret0, _ := ret[0].(models.PipelineConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipeline indicates an expected call of GetPipeline.
func (mr *MockPipelineManagerMockRecorder) GetPipeline(ctx, pid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipeline", reflect.TypeOf((*MockPipelineManager)(nil).GetPipeline), ctx, pid)
}

// GetPipelineHealth mocks base method.
func (m *MockPipelineManager) GetPipelineHealth(ctx context.Context, pid string) (models.PipelineHealth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipelineHealth", ctx, pid)
	ret0, _ := ret[0].(models.PipelineHealth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipelineHealth indicates an expected call of GetPipelineHealth.
func (mr *MockPipelineManagerMockRecorder) GetPipelineHealth(ctx, pid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineHealth", reflect.TypeOf((*MockPipelineManager)(nil).GetPipelineHealth), ctx, pid)
}

// GetPipelines mocks base method.
func (m *MockPipelineManager) GetPipelines(ctx context.Context) ([]models.ListPipelineConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipelines", ctx)
	ret0, _ := ret[0].([]models.ListPipelineConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipelines indicates an expected call of GetPipelines.
func (mr *MockPipelineManagerMockRecorder) GetPipelines(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelines", reflect.TypeOf((*MockPipelineManager)(nil).GetPipelines), ctx)
}

// ResumePipeline mocks base method.
func (m *MockPipelineManager) ResumePipeline(ctx context.Context, pid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumePipeline", ctx, pid)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResumePipeline indicates an expected call of ResumePipeline.
func (mr *MockPipelineManagerMockRecorder) ResumePipeline(ctx, pid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumePipeline", reflect.TypeOf((*MockPipelineManager)(nil).ResumePipeline), ctx, pid)
}

// StopPipeline mocks base method.
func (m *MockPipelineManager) StopPipeline(ctx context.Context, pid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopPipeline", ctx, pid)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopPipeline indicates an expected call of StopPipeline.
func (mr *MockPipelineManagerMockRecorder) StopPipeline(ctx, pid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopPipeline", reflect.TypeOf((*MockPipelineManager)(nil).StopPipeline), ctx, pid)
}

// TerminatePipeline mocks base method.
func (m *MockPipelineManager) TerminatePipeline(ctx context.Context, pid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminatePipeline", ctx, pid)
	ret0, _ := ret[0].(error)
	return ret0
}

// TerminatePipeline indicates an expected call of TerminatePipeline.
func (mr *MockPipelineManagerMockRecorder) TerminatePipeline(ctx, pid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminatePipeline", reflect.TypeOf((*MockPipelineManager)(nil).TerminatePipeline), ctx, pid)
}

// UpdatePipelineName mocks base method.
func (m *MockPipelineManager) UpdatePipelineName(ctx context.Context, id, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePipelineName", ctx, id, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePipelineName indicates an expected call of UpdatePipelineName.
func (mr *MockPipelineManagerMockRecorder) UpdatePipelineName(ctx, id, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePipelineName", reflect.TypeOf((*MockPipelineManager)(nil).UpdatePipelineName), ctx, id, name)
}
