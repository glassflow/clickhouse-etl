linters:
  # Enable all available linters.
  # Default: false
  enable-all: true
  # Disable specific linter
  # https://golangci-lint.run/usage/linters/#disabled-by-default
  disable:
    # [ Deprecated ]
    - tenv

    # [ Strong no-go ]
    - funlen # sometimes is better to keep a single function with many lines of boilerplate code
    - mnd # not all magic numbers are bad
    - inamedparam # it is unnecessary with concrete types
    - lll # not actual in the modern world
    - nlreturn # not necessary to force to add a blank line before return statement
    - paralleltest # let's leave it as an optional choise
    - testpackage # not needed to force it for all test functions
    - varnamelen # len of variables depends of the usage scope
    - wsl # not applicable for many cases to force adding empty lines
    - recvcheck # valid usecases to have pointer + nonpointer receivers (e.g. marshal/unmarshal JSON)

    # [ Debatable but feels useless ]
    - tagalign # it should be done by formatter, but it is not as for now
    - godot # not always comments finish with a sentence, sometimes it could be a code block or a bash command
    - dupl # different types are not detected, nothing new reported

    # [ Good ones but have known issues ]
    - ireturn # conflicts with the nolint lint and cache
    - godox # sometimes it is important to leave TODOs

linters-settings:
  cyclop:
    # The maximal code complexity to report.
    # Default: 10
    max-complexity: 30

  depguard:
    rules:
      main:
        deny:
          - pkg: "log$"
            desc: potential debug log
  errcheck:
    # Report about not checking of errors in type assertions: `a := b.(MyStruct)`.
    # Such cases aren't reported by default.
    # Default: false
    check-type-assertions: true
    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`.
    # Such cases aren't reported by default.
    # Default: false
    check-blank: true
    # List of functions to exclude from checking, where each entry is a single function to exclude.
    # See https://github.com/kisielk/errcheck#excluding-functions for details.
    exclude-functions:
      # - io/ioutil.ReadFile
      - io.Copy(*bytes.Buffer)
      - io.Copy(os.Stdout)

  gci:
    # Section configuration to compare against.
    # Section names are case-insensitive and may contain parameters in ().
    # The default order of sections is `standard > default > custom > blank > dot`,
    # If `custom-order` is `true`, it follows the order of `sections` option.
    # Default: ["standard", "default"]
    sections:
      - standard # Standard section: captures all standard packages.
      - default # Default section: contains all imports that could not be matched to another section type.
      - prefix(github.com/glassflow) # Custom section: groups all imports with the specified Prefix.
      - dot # Dot section: contains all dot imports. This section is not present unless explicitly enabled.

  gocritic:
    disabled-checks:
      - singleCaseSwitch

  gomoddirectives:
    replace-allow-list:
      - github.com/mholt/archiver/v3

  gomodguard:
    blocked:
      # List of blocked modules.
      # Default: []
      modules:
        # Blocked module.
        - github.com/uber-go/zap:
            # Recommended modules that should be used instead. (Optional)
            recommendations:
              - log/slog
            # Reason why the recommended module should be used. (Optional)
            reason: "official log package"
        - github.com/sirupsen/logrus:
            # Recommended modules that should be used instead. (Optional)
            recommendations:
              - log/slog
            # Reason why the recommended module should be used. (Optional)
            reason: "official log package"
        - github.com/pkg/errors:
            # Recommended modules that should be used instead. (Optional)
            recommendations:
              - errors
            # Reason why the recommended module should be used. (Optional)
            reason: "official error package"

  govet:
    # Enable all analyzers.
    # Default: false
    enable-all: true
    # Disable analyzers by name.
    # (in addition to default
    #   atomicalign, deepequalerrors, fieldalignment, findcall, nilness, reflectvaluecompare, shadow, sortslice,
    #   timeformat, unusedwrite
    # ).
    # Run `go tool vet help` to see all analyzers.
    # Default: []
    disable:
      - fieldalignment

  ireturn:
    allow:
      - error
      - stdlib
      - generic
      # You can specify idiomatic endings for interface
      - (goag.*Response)$

  nestif:
    # Minimal complexity of if statements to report.
    # Default: 5
    min-complexity: 6

  nolintlint:
    require-explanation: true
    require-specific: true

  tagliatelle:
    case:
      rules:
        # Any struct tag type can be used.
        # Support string case: `camel`, `pascal`, `kebab`, `snake`, `goCamel`, `goPascal`, `goKebab`, `goSnake`, `upper`, `lower`
        json: snake

  tagalign:
    # Whether enable tags sort.
    # If true, the tags will be sorted by name in ascending order.
    # eg: `xml:"bar" json:"bar" validate:"required"` -> `json:"bar" validate:"required" xml:"bar"`
    # Default: true
    sort: false

  unparam:
    check-exported: true

  unused:
    # Mark all struct fields that have been written to as used.
    # Default: true
    field-writes-are-uses: false
    # # Mark all exported identifiers as used.
    # # Default: true
    # exported-is-used: false
    # Mark all exported fields as used.
    # default: true
    exported-fields-are-used: false
    # Mark all function parameters as used.
    # default: true
    parameters-are-used: true
    # Mark all local variables as used.
    # default: true
    local-variables-are-used: false
    # Mark all identifiers inside generated files as used.
    # Default: true
    generated-is-used: false

  wrapcheck:
    ignoreSigs:
      - func fmt.Errorf(format string, a ...any) error
      - func (context.Context).Err() error

issues:
  exclude-dirs:
    - goag
    - k8s/api/*

  exclude-rules:
    - text: named return "zero\d*" with type ".*" found
      linters:
        - nonamedreturns
    - text: named return "ok" with type "bool" found
      linters:
        - nonamedreturns

    - text: 'do not define dynamic errors, use wrapped static errors instead: "fmt.Errorf(.*)'
      linters:
        - err113

    - path: _test\.go$
      linters:
        - exhaustruct
    - text: .*Opts is missing fields .*
      linters:
        - exhaustruct
    - text: "http.Client is missing fields"
      linters:
        - exhaustruct

    - text: "must returns generic interface \\(T\\) of type param any"
      linters:
        - ireturn

    - text: "fmt.Errorf can be replaced with errors.New"
      linters:
        - perfsprint

    - text: "prometheus\\w+ is a global variable"
      linters:
        - gochecknoglobals

    - text: 'shadow: declaration of "err" shadows declaration'
      linters:
        - govet

    - source: "^func mainErr\\("
      linters:
        - gocognit
        - maintidx
        - cyclop
        - gocyclo

    - text: " - result 0 \\(error\\) is always nil"
      linters:
        - unparam

    - source: "^func Main"
      linters:
        - gocognit

    # naming required by goag
    - text: "var-naming: don't use underscores in Go names; method ToSchema.* should be ToSchema.*"
      linters:
        - revive

    # naming required by goag
    - text: "var-naming: don't use underscores in Go names; method SetFromSchema.* should be SetFromSchema.*"
      linters:
        - revive

    # naming required by goag
    - text: "ST1003: should not use underscores in Go names; method ToSchema.* should be ToSchema.*"
      linters:
        - stylecheck

    # naming required by goag
    - text: "ST1003: should not use underscores in Go names; method SetFromSchema.* should be SetFromSchema.*"
      linters:
        - stylecheck
